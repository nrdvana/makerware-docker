#! /usr/bin/perl
use strict; use warnings;
use POSIX 'WNOHANG';

# messy, but need to import user account into docker else the files created by Makerware
# will have wrong permissions and be annoying, or maybe the user won't have access to files
# they normally would.
if ($ENV{ID}) {
	my ($uid, $user, $gid, $group, $grouplist)=
		($ENV{ID} =~ /^uid=([0-9]+)\(([^)]+)\) gid=([0-9]+)\(([^\)]+)\) [^=]+=(.*)$/)
		or die "Unexpected format for 'id' command : $ENV{ID}";
	my @sgroups;
	for ("$gid($group)", split ',', $grouplist) {
		# Each element of supplemental grouplist looks like   GID(GroupName)
		# Add the GIDs to the list, and then create the group if it doesn't exist.
		my ($sgid, $sgname)= ($_ =~ /^([0-9]+)\(([^)]+)\)$/)
			or die "Unexpected format for 'id' command at : $_";
		push @sgroups, $sgid;
		next if !$sgid || $sgname eq 'root'; # never mess with root user or group
		my $cnt_gname= getgrgid $sgid;
		my $cnt_gid= getgrnam $sgname;
		unless (($cnt_gname||'') eq $sgname) {
			my @cmd;
			if (!defined $cnt_gname && !defined $cnt_gid) { # neither exist in contianer
				warn "Adding group $sgid ($sgname)\n";
				@cmd= ( 'groupadd', -g => $sgid, $sgname );
			}
			elsif (!defined $cnt_gname) { # nothing owns the GID, but name does exist in container
				warn "Changing container group '$sgname' to gid $sgid\n";
				@cmd= ( 'groupmod', -g => $sgid, $sgname );
			}
			else { # gid maps to a different name in container than in host
				warn "Container group $sgid is '$cnt_gname' but '$sgname' on host\n";
			}
			system(@cmd) == 0 or die "@cmd"
				if @cmd;
		}
	}
	$grouplist= join(',', @sgroups);
	system("useradd", "-M", "-N", -u => $uid, -g => $gid, -G => $grouplist, $user) == 0
		or die "useradd -M -N -u $uid -g $gid -G $grouplist";
	$ENV{USER} //= $user;
}


# from conveyor service definition at /etc/init/conveyor
my $conveyor_uid= getpwnam 'conveyor' or die "No conveyor user";
my $conveyor_gid= getgrnam 'conveyor' or die "No conveyor group";
mkdir $_ for qw( /run/conveyor /var/log/conveyor ); # ignore failure, might already exist
chown $conveyor_uid, $conveyor_gid, '/run/conveyor' or die "$!";
chown 0,$conveyor_gid, '/var/log/conveyor' or die "$!";
chmod 03775, '/run/conveyor', '/var/log/conveyor';

my @conveyor_cmd= qw( sudo -u conveyor LD_LIBRARY_PATH=/usr/lib/makerbot/ /usr/bin/conveyor-svc --config /etc/conveyor.conf );
my @makerware_cmd= (($ENV{USER}? ( 'sudo', -u => $ENV{USER} ): ()), 'makerware', @ARGV);

my ($conveyor, $makerware, $pid);
# Launch conveyor.  Make sure it starts.
if (!($conveyor= fork)) {
	defined $conveyor or die "fork: $!";
	exec(@conveyor_cmd) or die "Can't launch conveyor";
}
sleep 2;
# is it still running?
if (($pid= waitpid $conveyor, WNOHANG)) {
	die "Conveyor didn't stay running\n";
}
# Now run makerware, and terminate when it exits
system(@makerware_cmd);
kill TERM => $conveyor;
waitpid $conveyor, 0;
